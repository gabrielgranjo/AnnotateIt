if (!is.character(labels) || length(labels) < 2) {
stop("Labels should be a character vector with at least two elements")
}
if (!is.numeric(num_rows) || num_rows <= 0) {
stop("num_rows should be a positive number")
}
if (!is.character(user_name) || user_name == "") {
stop("user_name should be a non-empty string")
}
data_frame <- get(data_frame_name, .GlobalEnv)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(app_name),
tags$head(tags$style(HTML("
body { font-family: 'Arial', sans-serif; }
.btn { margin: 5px; }
.btn-lg { padding: 10px 20px; font-size: 18px; }
#textDisplay { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
.shiny-output-error { color: #a94442; }
.shiny-output-error:before { content: 'Error: '; }
"))),
fluidRow(
column(8, offset = 2,
textOutput("textDisplay"),
uiOutput("labelButtons")
)
)
)
server <- function(input, output, session) {
sampled_data <- data_frame[sample(nrow(data_frame), min(num_rows, nrow(data_frame))), ]
index <- reactiveVal(1)
output$textDisplay <- renderText({
if(index() <= num_rows) {
sampled_data$text[index()]
} else {
"All texts have been labeled. Please close this session."
}
})
output$labelButtons <- renderUI({
lapply(labels, function(label) {
actionButton(inputId = paste0("label_", label),
label = label,
class = "btn btn-primary btn-lg")
})
})
lapply(labels, function(label) {
observeEvent(input[[paste0("label_", label)]], {
if(index() <= num_rows) {
sampled_data$label[index()] <- label
index(index() + 1)
if (index() > num_rows) {
if (!return_data) {
# Generate filename with timestamp and user name
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
filename <- paste0(user_name, "_labeled_data_", timestamp, ".csv")
# Save the labeled data to a CSV file in the current directory
write.csv(sampled_data, filename, row.names = FALSE)
showModal(modalDialog(
title = "Session Complete",
paste("You have finished labeling all the texts. The labeled data has been saved as", filename, ". To start another session, please begin a new one."),
footer = modalButton("Close")
))
} else {
# Return the labeled data as an R object
return(sampled_data)
}
}
}
})
})
}
runApp(list(ui = ui, server = server))
}
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 5, user_name = "Alice", return_data = TRUE)
rm(list = ls())
data <- readxl::read_xlsx("draw_total.xlsx")
View(data)
data <- readxl::read_xlsx("draw_total.xlsx") %>%
select(text)
label_text_data <- function(data_frame_name, labels, app_name = "Text Classification App", num_rows = 10, user_name = "user", return_data = FALSE) {
# Check and install necessary packages
necessary_packages <- c("shiny", "shinythemes")
installed_packages <- necessary_packages %in% rownames(installed.packages())
if (any(!installed_packages)) {
install.packages(necessary_packages[!installed_packages])
}
# Load the necessary libraries
library(shiny)
library(shinythemes)
if (!exists(data_frame_name, .GlobalEnv)) {
stop("Data frame not found in global environment")
}
if (!is.character(labels) || length(labels) < 2) {
stop("Labels should be a character vector with at least two elements")
}
if (!is.numeric(num_rows) || num_rows <= 0) {
stop("num_rows should be a positive number")
}
if (!is.character(user_name) || user_name == "") {
stop("user_name should be a non-empty string")
}
data_frame <- get(data_frame_name, .GlobalEnv)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(app_name),
tags$head(tags$style(HTML("
body { font-family: 'Arial', sans-serif; }
.btn { margin: 5px; }
.btn-lg { padding: 10px 20px; font-size: 18px; }
#textDisplay { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
.shiny-output-error { color: #a94442; }
.shiny-output-error:before { content: 'Error: '; }
"))),
fluidRow(
column(8, offset = 2,
textOutput("textDisplay"),
uiOutput("labelButtons")
)
)
)
server <- function(input, output, session) {
sampled_data <- data_frame[sample(nrow(data_frame), min(num_rows, nrow(data_frame))), ]
index <- reactiveVal(1)
output$textDisplay <- renderText({
if(index() <= num_rows) {
sampled_data$text[index()]
} else {
"All texts have been labeled. Please close this session."
}
})
output$labelButtons <- renderUI({
lapply(labels, function(label) {
actionButton(inputId = paste0("label_", label),
label = label,
class = "btn btn-primary btn-lg")
})
})
lapply(labels, function(label) {
observeEvent(input[[paste0("label_", label)]], {
if(index() <= num_rows) {
sampled_data$label[index()] <- label
index(index() + 1)
if (index() > num_rows) {
if (!return_data) {
# Generate filename with timestamp and user name
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
filename <- paste0(user_name, "_labeled_data_", timestamp, ".csv")
# Save the labeled data to a CSV file in the current directory
write.csv(sampled_data, filename, row.names = FALSE)
showModal(modalDialog(
title = "Session Complete",
paste("You have finished labeling all the texts. The labeled data has been saved as", filename, ". To start another session, please begin a new one."),
footer = modalButton("Close")
))
} else {
# Return the labeled data as an R object
return(sampled_data)
}
}
}
})
})
}
runApp(list(ui = ui, server = server))
}
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 5, user_name = "Alice", return_data = TRUE)
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 5, user_name = "Alice", return_data = TRUE)
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 5, user_name = "Alice", return_data = FALSE)
label_text_data <- function(data_frame_name, labels, app_name = "Text Classification App", num_rows = 10, user_name = "user") {
# Check and install necessary packages
necessary_packages <- c("shiny", "shinythemes")
installed_packages <- necessary_packages %in% rownames(installed.packages())
if (any(!installed_packages)) {
install.packages(necessary_packages[!installed_packages])
}
# Load the necessary libraries
library(shiny)
library(shinythemes)
if (!exists(data_frame_name, .GlobalEnv)) {
stop("Data frame not found in global environment")
}
if (!is.character(labels) || length(labels) < 2) {
stop("Labels should be a character vector with at least two elements")
}
if (!is.numeric(num_rows) || num_rows <= 0) {
stop("num_rows should be a positive number")
}
if (!is.character(user_name) || user_name == "") {
stop("user_name should be a non-empty string")
}
data_frame <- get(data_frame_name, .GlobalEnv)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(app_name),
tags$head(tags$style(HTML("
body { font-family: 'Arial', sans-serif; }
.btn { margin: 5px; }
.btn-lg { padding: 10px 20px; font-size: 18px; }
#textDisplay { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
.shiny-output-error { color: #a94442; }
.shiny-output-error:before { content: 'Error: '; }
"))),
fluidRow(
column(8, offset = 2,
textOutput("textDisplay"),
uiOutput("labelButtons")
)
)
)
server <- function(input, output, session) {
sampled_data <- data_frame[sample(nrow(data_frame), min(num_rows, nrow(data_frame))), ]
index <- reactiveVal(1)
output$textDisplay <- renderText({
if(index() <= num_rows) {
sampled_data$text[index()]
} else {
"All texts have been labeled. Please close this session."
}
})
output$labelButtons <- renderUI({
lapply(labels, function(label) {
actionButton(inputId = paste0("label_", label),
label = label,
class = "btn btn-primary btn-lg")
})
})
lapply(labels, function(label) {
observeEvent(input[[paste0("label_", label)]], {
if(index() <= num_rows) {
sampled_data$label[index()] <- label
index(index() + 1)
if (index() > num_rows) {
# Generate filename with timestamp and user name
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
filename <- paste0(user_name, "_labeled_data_", timestamp, ".csv")
# Save the labeled data to a CSV file
write.csv(sampled_data, filename, row.names = FALSE)
showModal(modalDialog(
title = "Session Complete",
paste("You have finished labeling all the texts. The labeled data has been saved as", filename, ". To start another draw, please begin a new session."),
footer = modalButton("Close")
))
}
}
})
})
}
runApp(list(ui = ui, server = server))
}
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 5, user_name = "Alice")
label_text_data <- function(data_frame_name, labels, app_name = "Text Classification App", num_rows = 10, user_name = "user") {
# Check and install necessary packages
necessary_packages <- c("shiny", "shinythemes")
installed_packages <- necessary_packages %in% rownames(installed.packages())
if (any(!installed_packages)) {
install.packages(necessary_packages[!installed_packages])
}
# Load the necessary libraries
library(shiny)
library(shinythemes)
if (!exists(data_frame_name, .GlobalEnv)) {
stop("Data frame not found in global environment")
}
if (!is.character(labels) || length(labels) < 2) {
stop("Labels should be a character vector with at least two elements")
}
if (!is.numeric(num_rows) || num_rows <= 0) {
stop("num_rows should be a positive number")
}
if (!is.character(user_name) || user_name == "") {
stop("user_name should be a non-empty string")
}
data_frame <- get(data_frame_name, .GlobalEnv)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(app_name),
tags$head(tags$style(HTML("
body { font-family: 'Arial', sans-serif; }
.btn { margin: 5px; }
.btn-lg { padding: 10px 20px; font-size: 18px; }
#textDisplay { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
.shiny-output-error { color: #a94442; }
.shiny-output-error:before { content: 'Error: '; }
"))),
fluidRow(
column(8, offset = 2,
textOutput("textDisplay"),
uiOutput("labelButtons")
)
)
)
server <- function(input, output, session) {
sampled_data <- data_frame[sample(nrow(data_frame), min(num_rows, nrow(data_frame))), ]
index <- reactiveVal(1)
output$textDisplay <- renderText({
if(index() <= num_rows) {
sampled_data$text[index()]
} else {
"All texts have been labeled. Please close this session."
}
})
output$labelButtons <- renderUI({
lapply(labels, function(label) {
actionButton(inputId = paste0("label_", label),
label = label,
class = "btn btn-primary btn-lg")
})
})
lapply(labels, function(label) {
observeEvent(input[[paste0("label_", label)]], {
if(index() <= num_rows) {
sampled_data$label[index()] <- label
index(index() + 1)
if (index() > num_rows) {
# Generate filename with timestamp and user name
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
filename <- paste0(user_name, "_labeled_data_", timestamp, ".csv")
# Save the labeled data to a CSV file
write.csv(sampled_data, filename, row.names = FALSE)
showModal(modalDialog(
title = "Session Complete",
paste("You have finished labeling all the texts. The labeled data has been saved as", filename, ". To start another draw, please begin a new session."),
footer = modalButton("Close")
))
}
}
})
})
}
runApp(list(ui = ui, server = server))
}
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 10, user_name = "Alice")
data$label <- NA
label_text_data <- function(data_frame_name, labels, app_name = "Text Classification App", num_rows = 10, user_name = "user") {
# Check and install necessary packages
necessary_packages <- c("shiny", "shinythemes")
installed_packages <- necessary_packages %in% rownames(installed.packages())
if (any(!installed_packages)) {
install.packages(necessary_packages[!installed_packages])
}
# Load the necessary libraries
library(shiny)
library(shinythemes)
if (!exists(data_frame_name, .GlobalEnv)) {
stop("Data frame not found in global environment")
}
if (!is.character(labels) || length(labels) < 2) {
stop("Labels should be a character vector with at least two elements")
}
if (!is.numeric(num_rows) || num_rows <= 0) {
stop("num_rows should be a positive number")
}
if (!is.character(user_name) || user_name == "") {
stop("user_name should be a non-empty string")
}
data_frame <- get(data_frame_name, .GlobalEnv)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(app_name),
tags$head(tags$style(HTML("
body { font-family: 'Arial', sans-serif; }
.btn { margin: 5px; }
.btn-lg { padding: 10px 20px; font-size: 18px; }
#textDisplay { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
.shiny-output-error { color: #a94442; }
.shiny-output-error:before { content: 'Error: '; }
"))),
fluidRow(
column(8, offset = 2,
textOutput("textDisplay"),
uiOutput("labelButtons")
)
)
)
server <- function(input, output, session) {
sampled_data <- data_frame[sample(nrow(data_frame), min(num_rows, nrow(data_frame))), ]
index <- reactiveVal(1)
output$textDisplay <- renderText({
if(index() <= num_rows) {
sampled_data$text[index()]
} else {
"All texts have been labeled. Please close this session."
}
})
output$labelButtons <- renderUI({
lapply(labels, function(label) {
actionButton(inputId = paste0("label_", label),
label = label,
class = "btn btn-primary btn-lg")
})
})
lapply(labels, function(label) {
observeEvent(input[[paste0("label_", label)]], {
if(index() <= num_rows) {
sampled_data$label[index()] <- label
index(index() + 1)
if (index() > num_rows) {
# Generate filename with timestamp and user name
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
filename <- paste0(user_name, "_labeled_data_", timestamp, ".csv")
# Save the labeled data to a CSV file
write.csv(sampled_data, filename, row.names = FALSE)
showModal(modalDialog(
title = "Session Complete",
paste("You have finished labeling all the texts. The labeled data has been saved as", filename, ". To start another draw, please begin a new session."),
footer = modalButton("Close")
))
}
}
})
})
}
runApp(list(ui = ui, server = server))
}
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", num_rows = 10, user_name = "Alice")
View(data)
data <- data %>%
select(text)
label_text_data <- function(data_frame_name, labels, app_name = "Text Classification App", num_rows = 10, user_name = "user") {
# Check and install necessary packages
necessary_packages <- c("shiny", "shinythemes")
installed_packages <- necessary_packages %in% rownames(installed.packages())
if (any(!installed_packages)) {
install.packages(necessary_packages[!installed_packages])
}
# Load the necessary libraries
library(shiny)
library(shinythemes)
if (!exists(data_frame_name, .GlobalEnv)) {
stop("Data frame not found in global environment")
}
if (!is.character(labels) || length(labels) < 2) {
stop("Labels should be a character vector with at least two elements")
}
if (!is.numeric(num_rows) || num_rows <= 0) {
stop("num_rows should be a positive number")
}
if (!is.character(user_name) || user_name == "") {
stop("user_name should be a non-empty string")
}
data_frame <- get(data_frame_name, .GlobalEnv)
data_frame$label <- NA  # Add a column for labels
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(app_name),
tags$head(tags$style(HTML("
body { font-family: 'Arial', sans-serif; }
.btn { margin: 5px; }
.btn-lg { padding: 10px 20px; font-size: 18px; }
#textDisplay { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
.shiny-output-error { color: #a94442; }
.shiny-output-error:before { content: 'Error: '; }
"))),
fluidRow(
column(8, offset = 2,
textOutput("progressDisplay"),
textOutput("textDisplay"),
uiOutput("labelButtons")
)
)
)
server <- function(input, output, session) {
sampled_data <- reactiveVal(data_frame[sample(nrow(data_frame), min(num_rows, nrow(data_frame))), ])
index <- reactiveVal(1)
output$progressDisplay <- renderText({
paste("Labeling text", index(), "of", num_rows)
})
output$textDisplay <- renderText({
if(index() <= num_rows) {
sampled_data()$text[index()]
} else {
"All texts have been labeled. Please close this session."
}
})
output$labelButtons <- renderUI({
lapply(labels, function(label) {
actionButton(inputId = paste0("label_", label),
label = label,
class = "btn btn-primary btn-lg")
})
})
lapply(labels, function(label) {
observeEvent(input[[paste0("label_", label)]], {
if(index() <= num_rows) {
update_sampled_data <- sampled_data()
update_sampled_data$label[index()] <- label
sampled_data(update_sampled_data)
index(index() + 1)
if (index() > num_rows) {
# Generate filename with timestamp and user name
timestamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
filename <- paste0(user_name, "_labeled_data_", timestamp, ".csv")
# Save the labeled data to a CSV file
write.csv(sampled_data(), filename, row.names = FALSE)
showModal(modalDialog(
title = "Session Complete",
paste("You have finished labeling all the texts. The labeled data has been saved as", filename, ". To start another draw, please begin a new session."),
footer = modalButton("Close")
))
}
}
})
})
}
runApp(list(ui = ui, server = server))
}
label_text_data("data", c("Label1", "Label2", "Label3"), "My Custom Labeling App", 10, "Alice")
label_text_data("data", c("1", "2", "3"), "HoHoHo", 10, "Pedro")
setwd("~/Desktop/AnnotateIt")
library(usethis)
create_package(path = "~/Desktop/AnnotateIt")
devtools::document()
